% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/arrange.R
\name{arrange}
\alias{arrange}
\alias{arrange_season}
\alias{arrange_tag}
\title{Sort pinniped data}
\usage{
arrange_season(x, season.info, ..., .desc = TRUE, .remove = TRUE)

arrange_tag(
  x,
  ...,
  sort_columns = c("species", "non_amlr_tag"),
  .remove = TRUE
)
}
\arguments{
\item{x}{data frame. This data frame must contain specific columns; see Details}

\item{season.info}{season.info data frame; ideally the season.info
data frame from the output of \code{\link{mod_season_info}}}

\item{...}{additional tidyselect arguments passed to
\code{\link[dplyr]{arrange}()}, after the primary (i.e., season or tag) sort}

\item{.desc}{logical; for \code{arrange_season} only.
Indicates if the data should be sorted by the descending season open date.
Default is \code{TRUE}}

\item{.remove}{logical; should the additional columns created for sorting
be removed before returning the data frame?
Default is \code{TRUE}}

\item{sort_columns}{character vector of column(s) by which to first sort
\code{x} when using \code{arrange_tag}. Ignored if \code{NULL};
default is \code{c("species", "non_amlr_tag")}}
}
\value{
\code{x}, sorted as described in Details
}
\description{
Sort pinniped data
}
\details{
\code{arrange_season} sorts \code{x} by season,
specifically by the corresponding season_open_date (descending, by default),
and then by other columns provided via \code{...}.

\code{arrange_tag} sorts \code{x} by the columns specified as
character strings in 'sort_columns', if provided,
then by the tag number, and finally by other columns provided via \code{...}.
For the tag number, tags with leading letters (e.g., 'A' in 'A100')
are sorted after tag numbers without letters.
Tag numbers with no numbers are sorted last.
}
\examples{
tags.df <- data.frame(
  species = c("Leopard seal", rep("Fur seal", 7)),
  non_amlr_tag = TRUE,
  tag = c("10", "j89", "090", "A89", "C004", "A10", "A100", "CTOrange")
)
arrange_tag(tags.df)
arrange_tag(tags.df, sort_columns = NULL)
arrange_tag(tags.df, .remove = FALSE)

}
